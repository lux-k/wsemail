/*

Copyright (c) University of Pennsylvania 2004
With permission of Carl A. Gunter, this code can be used for teaching, experimentation,
and research.

Programmer: Kevin Lux

*/

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.0.3705.288.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System.Xml;
using System;
using System.IO;
using System.Web.Services.Protocols;
using Microsoft.Web.Services2.Security.Tokens;
using Microsoft.Web.Services2.Security;
using Microsoft.Web.Services2;
using System.ComponentModel;
using System.Web.Services;
using System.Collections;

namespace WSEmailProxy 
{
	public delegate SecurityToken TokenGrabber();

	/// <remarks/>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name="MailServerSoap", Namespace="http://securitylab.cis.upenn.edu/WSEmail")]
	public class MailServerProxy : WebServicesClientProtocol, ICloneable
	{
    
		private SecurityToken _sectok = null;
		private TokenGrabber _sectokret = null;

		public void Init() 
		{
			this.Url = "http://localhost/WSEMailServer/MailServer.asmx";
			this.RequestSoapContext.Security.Timestamp.TtlInSeconds = 600;
		}

		/// <remarks/>
		public MailServerProxy() 
		{
			Init();
		}

		public object Clone() 
		{
			return this.MemberwiseClone();
		}

		public MailServerProxy(string u) 
		{
			Init();
			this.Url = u;
		}

		public SecurityToken SecurityToken 
		{
			get 
			{
				return this._sectok;
			}
			set 
			{
				if (value != null) 
				{
					this._sectok = value;
					this.RequestSoapContext.Security.Tokens.Clear();
					this.RequestSoapContext.Security.Elements.Clear();
					this.RequestSoapContext.Security.Tokens.Add(_sectok);
					MessageSignature sig = new MessageSignature(_sectok);
					this.RequestSoapContext.Security.Elements.Add(sig);
				}
			}
		}

		public TokenGrabber SecurityTokenRetriever 
		{
			get 
			{
				return this._sectokret;
			}
			set 
			{
				this._sectokret = value;
				if (this.SecurityToken == null) 
				{
					Debug.WriteLine("Set STR...");
					this.SecurityToken = this.SecurityTokenRetriever();
				}
			}
		}



		#region WSEmailFetchHeaders
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://securitylab.cis.upenn.edu/WSEmail/WSEmailFetchHeaders", RequestNamespace="http://securitylab.cis.upenn.edu/WSEmail", ResponseNamespace="http://securitylab.cis.upenn.edu/WSEmail", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public WSEmailHeader[] WSEmailFetchHeaders(DateTime messagesSince) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"WSEmailFetchHeaders");
			object[] results = this.Invoke("WSEmailFetchHeaders", new object[] {messagesSince});
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"WSEmailFetchHeaders");
			return ((WSEmailHeader[])(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginWSEmailFetchHeaders(DateTime messagesSince, System.AsyncCallback callback, object asyncState) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"WSEmailFetchHeaders");
			return this.BeginInvoke("WSEmailFetchHeaders", new object[]{messagesSince}, callback, asyncState);
		}
    
		/// <remarks/>
		public WSEmailHeader[] EndWSEmailFetchHeaders(System.IAsyncResult asyncResult) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"WSEmailFetchHeaders");
			object[] results = this.EndInvoke(asyncResult);
			return ((WSEmailHeader[])(results[0]));
		}

		#endregion

		#region WSEmailSend

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://securitylab.cis.upenn.edu/WSEmail/WSEmailSend", RequestNamespace="http://securitylab.cis.upenn.edu/WSEmail", ResponseNamespace="http://securitylab.cis.upenn.edu/WSEmail", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public WSEmailStatus WSEmailSend(WSEmailMessage theMessage, XmlElement theSig) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"WSEmailSend");
			object[] results = this.Invoke("WSEmailSend", new object[] {
																		   theMessage,
																		   theSig});
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"WSEmailSend");
			return ((WSEmailStatus)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginWSEmailSend(WSEmailMessage theMessage, XmlElement theSig, System.AsyncCallback callback, object asyncState) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"WSEmailSend");
			// PennRoutingFilters.PennRoutingUtilities.LogTransit(this.Url,EventQueue.TransitItem.Actions.To,"WSEmailSend/Begin");
			return this.BeginInvoke("WSEmailSend", new object[] {
																	theMessage,
																	theSig}, callback, asyncState);
		}
    
		/// <remarks/>
		public WSEmailStatus EndWSEmailSend(System.IAsyncResult asyncResult) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"WSEmailSend");
			object[] results = this.EndInvoke(asyncResult);
			return ((WSEmailStatus)(results[0]));
		}
		#endregion

		/*
		#region WSEmailCleaning
		public string CleanWSEmailMessage(string s) 
		{
			s = s.Replace("\n",Environment.NewLine);
			return s;
		}

		public string UnCleanWSEmailMessage(string s) 
		{
			s = s.Replace(Environment.NewLine,"\n");
			return s;
		}
		#endregion
		*/

		#region WSEmailRetrieve

		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://securitylab.cis.upenn.edu/WSEmail/WSEmailRetrieve", RequestNamespace="http://securitylab.cis.upenn.edu/WSEmail", ResponseNamespace="http://securitylab.cis.upenn.edu/WSEmail", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public WSEmailPackage WSEmailRetrieve(int messageToGet) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"WSEmailRetrieve");
			object[] results = this.Invoke("WSEmailRetrieve", new object[] {
																			   messageToGet});

			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"WSEmailRetrieve");
			return (WSEmailPackage)(results[0]);
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginWSEmailRetrieve(int messageToGet, System.AsyncCallback callback, object asyncState) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"WSEmailRetrieve");
			return this.BeginInvoke("WSEmailRetrieve", new object[] {
																		messageToGet}, callback, asyncState);
		}
    
		/// <remarks/>
		public WSEmailPackage EndWSEmailRetrieve(System.IAsyncResult asyncResult) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"WSEmailRetrieve");
			object[] results = this.EndInvoke(asyncResult);
			return (WSEmailPackage)(results[0]);
		}
		#endregion

		#region WSEmailDelete
		/// <remarks/>
		public WSEmailStatus WSEmailDelete(int messagesToDelete) 
		{
			return this.WSEmailDelete(new int[] {messagesToDelete});
		}

		public System.IAsyncResult BeginWSEmailDelete(int messagesToDelete, System.AsyncCallback callback, object asyncState) 
		{
			return this.BeginWSEmailDelete(new int[] {messagesToDelete},callback,asyncState);
		}
    
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://securitylab.cis.upenn.edu/WSEmail/WSEmailDelete", RequestNamespace="http://securitylab.cis.upenn.edu/WSEmail", ResponseNamespace="http://securitylab.cis.upenn.edu/WSEmail", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public WSEmailStatus WSEmailDelete(int[] messagesToDelete) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"WSEmailDelete");
			object[] results = this.Invoke("WSEmailDelete", new object[] {messagesToDelete});
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"WSEmailDelete");
			return ((WSEmailStatus)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginWSEmailDelete(int[] messagesToDelete, System.AsyncCallback callback, object asyncState) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"WSEmailDelete");
			return this.BeginInvoke("WSEmailDelete", new object[] {
																		  messagesToDelete}, callback, asyncState);
		}
    
		/// <remarks/>
		public WSEmailStatus EndWSEmailDelete(System.IAsyncResult asyncResult) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"WSEmailDelete");
			object[] results = this.EndInvoke(asyncResult);
			return ((WSEmailStatus)(results[0]));
		}

		#endregion

		#region ExecuteExtensionHandler
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://securitylab.cis.upenn.edu/WSEmail/ExecuteExtensionHandler", RequestNamespace="http://securitylab.cis.upenn.edu/WSEmail", ResponseNamespace="http://securitylab.cis.upenn.edu/WSEmail", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public XmlElement ExecuteExtensionHandler(string ext, XmlElement args) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"ExecuteExtensionHandler");
			object[] results = this.Invoke("ExecuteExtensionHandler", new object[] {ext,args});
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"ExecuteExtensionHandler");
			return ((XmlElement)(results[0]));
		}
    
		/// <remarks/>
		public System.IAsyncResult BeginExecuteExtensionHandler(string ext, XmlElement args,System.AsyncCallback callback, object asyncState) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestStart,"ExecuteExtensionHandler");
			return this.BeginInvoke("ExecuteExtensionHandler", new object[] {ext,args}, callback, asyncState);
		}
    
		/// <remarks/>
		public XmlElement EndExecuteExtensionHandler(System.IAsyncResult asyncResult) 
		{
			PennLibraries.Utilities.LogEvent(PennLibraries.LogType.RequestEnd,"ExecuteExtensionHandler");
			object[] results = this.EndInvoke(asyncResult);
			return ((XmlElement)(results[0]));
		}

		#endregion

		public SecurityToken PingServer() 
		{
			PennLibraries.Utilities.LogToStatusWindow("Requesting public-key certificate from server " + this.Url + " for encrypting email.");
			this.WSEmailSend(null,null);

			SecurityToken t = null;
			foreach (SecurityToken r  in ResponseSoapContext.Security.Tokens) 
			{
				t = r;
				break;
			}
			return t;
		}

		public void AddServerEncryption()
		{
			SecurityToken encryptionToken = PingServer();
			RequestSoapContext.Security.Tokens.Add(encryptionToken);
			EncryptedData enc = new EncryptedData(encryptionToken);
			this.RequestSoapContext.Security.Elements.Add(enc);
		}

	}
}
